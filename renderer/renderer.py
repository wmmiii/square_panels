#!/usr/bin/python3

"""
A utility script to convert font and image assets into C++ constants that can be
used when rendering to an LED matrix.

Font rendering example:
./renderer.py -f FragmentMono-Regular.ttf -n chars

Image rendering example:
./renderer.py -i vampire.png -n vampire
"""

import argparse
from PIL import Image, ImageFont, ImageDraw

SAMPLES = 1

def draw_char(char: str, width: int, height: int, font: ImageFont):
  """
  Renders a single character from the supplied font and returns the PIL image
  object.
  """
  image = Image.new("P", (width*SAMPLES, height*SAMPLES), (0))
  draw = ImageDraw.Draw(image)
  draw.text((0, -SAMPLES*4), char, (255), font=font, features="i")
  return image.resize((width, height), Image.ANTIALIAS)

def char_img_to_cpp_array(img: Image, width: int, height: int):
  """
  Accepts a PIL image object of a character and returns a string containing the
  corresponding encoded C++ array.
  """
  arr = '\n  {'
  
  for x in range(width):
    arr += '\n    {'
    for y in range(height):
      pixel = img.getpixel((x, y))
      arr += '{}, '.format(pixel)
    arr += '},'

  arr += '\n  },'
  return arr

def render_font(args):
  """
  Accepts program arguments describing a font file and returns a string
  containing the C++ file that describes the font.
  """

  out = """// DO NOT MODIFY
// This file has been auto-generated by renderer.py
// {font}

#pragma once

#include <FastLED.h>

const uint8_t {name}_WIDTH = {width};

const uint8_t {name}[255][{width}][{height}] = {{""".format(
  font = args.font,
  name = args.name.upper(),
  width = args.width,
  height = args.height,
)

  font = ImageFont.truetype(args.font, args.height * SAMPLES)

  for i in range(255):
     char_img = draw_char(chr(i), args.width, args.height, font)
     out += char_img_to_cpp_array(char_img, args.width, args.height)

  out += "\n};\n"

  return out

def render_bmp(args):
  """
  Accepts program arguments describing an image file and returns a string
  containing the C++ file that describes the image.
  """

  out = """#pragma once

#include <FastLED.h>

// DO NOT MODIFY
// This file has been auto-generated by renderer.py

const uint8_t {name}_WIDTH = {width};
const uint8_t {name}_HEIGHT = {height};

const uint8_t {name}[{width}][{height}][3] = {{""".format(
  name = args.name.upper(),
  width = args.width,
  height = args.height,
)

  image = Image.open(args.image)
  image = image.resize((args.width, args.height), Image.ANTIALIAS)
  
  for x in range(args.width):
    out += '\n  {'
    for y in range(args.height):
      pixel = image.getpixel((x, y))
      out += '{{{red},{green},{blue}}}, '.format(
        red=pixel[0],
        green=pixel[1],
        blue=pixel[2],
      )
    out += '},'

  out += "\n};\n"

  return out

def main():
  parser = argparse.ArgumentParser(
                      prog='Font Renderer',
                      description='Converts a font into C++ arrays for use on panel rendering.')

  parser.add_argument('-i', dest='image')
  parser.add_argument('-f', dest='font')
  parser.add_argument('-n', dest='name')
  parser.add_argument('--width', dest='width', type=int, default='10')
  parser.add_argument('--height', dest='height', type=int, default='16')
  parser.add_argument('-o', dest='output', default="../src/fonts.h")

  args = parser.parse_args()

  if args.font != None and args.image != None:
    raise "-i and -f must not both be set!"
  
  out = ""
  
  if args.font != None:
    out = render_font(args)
  elif args.image != None:
    out = render_bmp(args)
  else:
    raise "Either -i or -f must be set!"

  with open("../src/{name}.h".format(name = args.name.lower()), "w") as file:
    file.write(out)

if __name__ == "__main__":
    main()